# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WgNjk260vI-UCnZU1gMEUT5h2NK7c2OQ
"""

import os
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from concurrent.futures import ThreadPoolExecutor

# Function to read test and label files
def read_data(test_file):
    label_file = test_file.replace(".csv", "_label.csv")
    if not os.path.exists(label_file):
        print(f"Label file '{label_file}' does not exist for '{test_file}'. Skipping...")
        return None, None
    test_data = pd.read_csv(test_file)
    label_data = pd.read_csv(label_file)
    return test_data, label_data

# Function to draw time series plots with anomaly regions
def plot_time_series(test_data, label_data):
    try:
        plt.figure(figsize=(10, 6))
        plt.plot(test_data.index, test_data.iloc[:, 0], label='Time Series Data')  # Assuming the first column contains the time series data
        for index, row in label_data.iterrows():
            plt.axvspan(row['start_time'], row['end_time'], color='red', alpha=0.3, label='Anomaly Region' if index == 0 else '')
        plt.xlabel('Time')
        plt.ylabel('Value')
        plt.title('Time Series Data with Anomaly Regions')
        plt.legend()
        plt.show()
    except KeyError as e:
        print(f"KeyError: {e}. One or more columns are missing in the data DataFrame.")

# Function to perform EDA for anomaly periods
def perform_anomaly_eda(test_data, label_data):
    try:
        # Check if 'start_time' and 'end_time' columns exist in label data
        if 'start_time' not in label_data.columns or 'end_time' not in label_data.columns:
            print("Error: 'start_time' or 'end_time' columns not found in the label data DataFrame.")
            return

        # Check if 'anomaly' column exists in label data
        if 'anomaly' not in label_data.columns:
            print("Error: 'anomaly' column not found in the label data DataFrame.")
            return

        # Filter test data for anomaly periods
        anomaly_indices = label_data[label_data['anomaly'] == 1].index
        anomaly_data = test_data.iloc[anomaly_indices]

        # Basic statistics
        print("Basic Statistics for Anomaly Periods:")
        print(anomaly_data.describe())
        print("\n")

        # Distribution plot for anomaly periods
        plt.figure(figsize=(10, 6))
        sns.histplot(anomaly_data.iloc[:, 0], kde=True)  # Assuming the first column contains the time series data
        plt.title('Distribution of Values (Anomaly Periods)')
        plt.xlabel('Value')
        plt.ylabel('Frequency')
        plt.show()

        # Box plot for anomaly periods
        plt.figure(figsize=(10, 6))
        sns.boxplot(data=anomaly_data.iloc[:, 0])  # Assuming the first column contains the time series data
        plt.title('Boxplot of Values (Anomaly Periods)')
        plt.xlabel('Value')
        plt.show()

        # Call function to identify root cause variables
        root_cause = identify_root_cause(test_data, label_data)
        print("Root cause variables:", root_cause)

    except KeyError as e:
        print(f"KeyError: {e}. One or more columns are missing in the data DataFrame.")

# Function to identify root cause variables
def identify_root_cause(test_data, label_data):
    try:
        # Filter test data for normal and anomaly periods
        normal_indices = label_data[label_data['anomaly'] == 0].index
        anomaly_indices = label_data[label_data['anomaly'] == 1].index

        normal_data = test_data.iloc[normal_indices]
        anomaly_data = test_data.iloc[anomaly_indices]

        # Calculate summary statistics
        normal_stats = normal_data.describe()
        anomaly_stats = anomaly_data.describe()

        # Compare distributions
        root_cause_variables = []
        for column in test_data.columns:
            # Perform statistical tests or other analysis to identify significant differences
            # For demonstration purposes, we'll just compare means
            if abs(anomaly_data[column].mean() - normal_data[column].mean()) > 2 * abs(test_data[column].std()):
                root_cause_variables.append(column)

        return root_cause_variables

    except Exception as e:
        print(f"Error: {e}")

# Set threshold for identifying root cause variables
threshold = 0.1  # Adjust as needed

# Get all files ending with 'test.csv' in the directory
test_files = [file for file in os.listdir() if file.endswith('test.csv')]

# Create a ThreadPoolExecutor
with ThreadPoolExecutor(max_workers=os.cpu_count()) as executor:
    # Iterate over test files and parallelize the execution of read_data function
    results = executor.map(read_data, test_files)

# Iterate over the results
for test_file, (test_data, label_data) in zip(test_files, results):
    if test_data is None or label_data is None:
        continue
    print(f"Reading data from {test_file}")
    print("Plotting time series with anomaly regions")
    plot_time_series(test_data, label_data)
    print("Performing EDA for Anomaly Periods")
    perform_anomaly_eda(test_data, label_data)
    print("\n")